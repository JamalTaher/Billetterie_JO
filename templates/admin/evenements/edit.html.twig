{% extends 'admin/index.html.twig' %}

{% block title %}Modifier un événement{% endblock %}

{% block body_content %}
    <h1>Modifier un événement</h1>

    {{ form_start(form) }}
        {{ form_row(form.nom) }}
        {{ form_row(form.categorie) }}
        
        {{ form_row(form.dateHeure) }}
        {{ form_row(form.lieu) }}
        {{ form_row(form.description) }}

        <h2>Prix et Offres</h2>
        <ul class="prix-offres"
            data-prototype="{{ form_widget(form.prixOffreEvenements.vars.prototype)|e('html_attr') }}"
            data-index="{{ form.prixOffreEvenements|length > 0 ? form.prixOffreEvenements|last.vars.name + 1 : 0 }}">
            {% for prixOffreEvenement in form.prixOffreEvenements %}
                <li data-index="{{ loop.index0 }}"> {# Ajout de data-index pour identifier l'élément #}
                    {{ form_row(prixOffreEvenement.offre) }}
                    {{ form_row(prixOffreEvenement.prix) }}
                    <button type="button" class="btn btn-danger btn-sm remove-collection-widget">Supprimer</button>
                </li>
            {% endfor %}
        </ul>
        <button type="button" class="btn btn-primary add-collection-widget" data-list-selector=".prix-offres">Ajouter un Prix/Offre</button>

        <button type="submit" class="btn btn-success mt-3">Mettre à jour l'événement</button>
    {{ form_end(form) }}

    <a href="{{ path('admin_evenements_list') }}" class="btn btn-secondary mt-3">Retour à la liste des événements</a>

  
    {{ include('admin/evenements/_delete_form.html.twig', {'evenement': evenement}) }}


  
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const addTagFormDeleteLink = (item) => {
                const removeFormButton = item.querySelector('.remove-collection-widget');
                if (removeFormButton) {
                    removeFormButton.addEventListener('click', (e) => {
                        e.preventDefault();
                        item.remove(); // Supprime l'élément (li) parent
                    });
                }
            };

            const addFormToCollection = (e) => {
                const collectionHolder = document.querySelector(e.currentTarget.dataset.listSelector);
                const item = document.createElement('li');

                // Utilise data-index pour le prototype si le data-index n'est pas déjà défini
                const nextIndex = collectionHolder.dataset.index || collectionHolder.children.length;

                item.innerHTML = collectionHolder.dataset.prototype.replace(
                    /__name__/g,
                    nextIndex
                );

                collectionHolder.appendChild(item);
                collectionHolder.dataset.index = parseInt(nextIndex) + 1; // Incrémente le data-index

                addTagFormDeleteLink(item);

                // Logique pour le pré-remplissage du prix standard
                const offreSelect = item.querySelector('select[id$="_offre"]');
                const prixInput = item.querySelector('input[id$="_prix"]');

                if (offreSelect && prixInput) {
                    const updatePrix = () => {
                        const selectedOption = offreSelect.options[offreSelect.selectedIndex];
                        const prixStandard = selectedOption ? selectedOption.dataset.prixStandard : '';
                        
                        if (prixInput.value === '') { // Pré-remplir seulement si le champ est vide
                             prixInput.value = prixStandard;
                        }
                    };

                    offreSelect.addEventListener('change', updatePrix);
                    // Pas besoin d'appeler updatePrix() au chargement pour les nouveaux éléments
                }
            };

            document
                .querySelectorAll('.add-collection-widget')
                .forEach(btn => btn.addEventListener("click", addFormToCollection));

           
            document
                .querySelectorAll('ul.prix-offres > li')
                .forEach(addTagFormDeleteLink);

            
            document.querySelectorAll('ul.prix-offres > li').forEach(item => {
                const offreSelect = item.querySelector('select[id$="_offre"]');
                const prixInput = item.querySelector('input[id$="_prix"]');

                if (offreSelect && prixInput) {
                    const updatePrixInitial = () => {
                        const selectedOption = offreSelect.options[offreSelect.selectedIndex];
                        const prixStandard = selectedOption ? selectedOption.dataset.prixStandard : '';
                        
                        
                        if (prixInput.value === '' || (prixInput.value == prixStandard && prixStandard !== '')) {
                             prixInput.value = prixStandard;
                        }
                    };
                    offreSelect.addEventListener('change', updatePrixInitial);
                    updatePrixInitial(); // Appeler une fois au chargement pour les éléments existants
                }
            });
        });
    </script>
{% endblock %}