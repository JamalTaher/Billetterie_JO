security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\Utilisateur:
            algorithm: auto

    # https://symfony.com/doc/current/security#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur
                property: email # Remplacez 'email' par la propriété que vous utilisez comme identifiant (par exemple, 'email')

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            provider: app_user_provider
            logout:
                 path: /logout
            form_login:
                login_path: /login
                check_path: /login # The route name that the login form submits to
                username_parameter: email   # Correspond à name="email" dans le formulaire
                password_parameter: password # Correspond à name="password" dans le formulaire
            # custom_authenticator: App\Security\LoginFormAuthenticator
            # where to redirect after logout
            # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/form_login_setup.html
            # form_login: true # Nous allons utiliser un custom authenticator à la place

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon